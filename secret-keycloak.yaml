apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: artifactory
    app.kubernetes.io/instance: jfrog
    chart: artifactory-107.49.6
    component: artifactory
    heritage: Helm
    release: jfrog
  name: jfrog-artifactory
  namespace: artifactory
spec:
  replicas: 1
  selector:
    matchLabels:
      app: artifactory
      release: jfrog
      role: artifactory
  serviceName: artifactory
  template:
    metadata:
      annotations:
        checksum/access-config: 98d2af9b60c3a7f535d08d84292f35d69ef13219a35422bf000440cbe1e7e03c
        checksum/admin-creds: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/binarystore: 0ddc14bfc866d5d5176fd608f4d35f2b427525d7501489ea3f5b42c3024fd55e
        checksum/database-secrets: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/systemyaml: 6c54616fa20c44d8121a4948708c031461d4625ad560a9f178249c2e20daec6d
      labels:
        app: artifactory
        chart: artifactory-107.49.6
        component: artifactory
        heritage: Helm
        release: jfrog
        role: artifactory
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: artifactory
                    release: jfrog
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - command:
            - /bin/bash
            - '-c'
            - >
              set -e; if [ -d /artifactory_extra_conf ] && [ -d
              /artifactory_bootstrap ]; then
                echo "Copying bootstrap config from /artifactory_extra_conf to /artifactory_bootstrap";
                cp -Lrfv /artifactory_extra_conf/ /artifactory_bootstrap/;
              fi; exec /entrypoint-artifactory.sh
          env: null
          image: 'releases-docker.jfrog.io/jfrog/artifactory-jcr:7.49.6'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - '-c'
                - >-
                  curl -s -k --fail --max-time 5
                  http://localhost:8091/artifactory/api/v1/system/liveness
            failureThreshold: 5
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: artifactory
          ports:
            - containerPort: 8082
              name: http
            - containerPort: 8081
              name: http-internal
          resources:
            limits:
              cpu: '1'
              memory: 4Gi
            requests:
              cpu: '500'
              memory: 1G1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
            runAsNonRoot: true
          startupProbe:
            exec:
              command:
                - sh
                - '-c'
                - >-
                  curl -s -k --fail --max-time 5
                  http://localhost:8091/artifactory/api/v1/system/readiness
            failureThreshold: 90
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /var/opt/jfrog/artifactory
              name: artifactory-volume
            - mountPath: /tmp/etc/artifactory/binarystore.xml
              name: binarystore-xml
              subPath: binarystore.xml
            - mountPath: /artifactory_bootstrap/info/installer-info.json
              name: installer-info
              subPath: installer-info.json
      initContainers:
        - command:
            - bash
            - '-c'
            - rm -fv /var/opt/jfrog/artifactory/etc/db.properties
          image: 'releases-docker.jfrog.io/ubi8/ubi-minimal:8.7.1049'
          imagePullPolicy: IfNotPresent
          name: delete-db-properties
          resources:
            limits:
              cpu: '1'
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
            runAsNonRoot: true
          volumeMounts:
            - mountPath: /var/opt/jfrog/artifactory
              name: artifactory-volume
        - command:
            - bash
            - '-c'
            - >-
              rm -rfv /var/opt/jfrog/artifactory/lost+found
              /var/opt/jfrog/artifactory/data/.lock
          image: 'releases-docker.jfrog.io/ubi8/ubi-minimal:8.7.1049'
          imagePullPolicy: IfNotPresent
          name: remove-lost-found
          resources:
            limits:
              cpu: '1'
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
            runAsNonRoot: true
          volumeMounts:
            - mountPath: /var/opt/jfrog/artifactory
              name: artifactory-volume
        - command:
            - /bin/bash
            - '-c'
            - >
              if [[ -e "/var/opt/jfrog/artifactory/etc/filebeat.yaml" ]]; then
              chmod 644 /var/opt/jfrog/artifactory/etc/filebeat.yaml; fi; echo
              "Copy system.yaml to /var/opt/jfrog/artifactory/etc"; mkdir -p
              /var/opt/jfrog/artifactory/etc; mkdir -p
              /var/opt/jfrog/artifactory/etc/access/keys/trusted; cp -fv
              /tmp/etc/system.yaml /var/opt/jfrog/artifactory/etc/system.yaml;
              echo "Remove /var/opt/jfrog/artifactory/lost+found folder if
              exists"; rm -rfv /var/opt/jfrog/artifactory/lost+found; echo "Copy
              binarystore.xml file"; mkdir -p
              /var/opt/jfrog/artifactory/etc/artifactory; cp -fv
              /tmp/etc/artifactory/binarystore.xml
              /var/opt/jfrog/artifactory/etc/artifactory/binarystore.xml; echo
              "Copy access.config.patch.yml to
              /var/opt/jfrog/artifactory/etc/access"; mkdir -p
              /var/opt/jfrog/artifactory/etc/access; cp -fv
              /tmp/etc/access.config.patch.yml
              /var/opt/jfrog/artifactory/etc/access/access.config.patch.yml;
          env: null
          image: 'releases-docker.jfrog.io/ubi8/ubi-minimal:8.7.1049'
          name: copy-system-configurations
          resources:
            limits:
              cpu: '1'
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
            runAsNonRoot: true
          volumeMounts:
            - mountPath: /var/opt/jfrog/artifactory
              name: artifactory-volume
            - mountPath: /tmp/etc/system.yaml
              name: systemyaml
              subPath: system.yaml
            - mountPath: /tmp/etc/artifactory/binarystore.xml
              name: binarystore-xml
              subPath: binarystore.xml
            - mountPath: /tmp/etc/access.config.patch.yml
              name: access-config
              subPath: access.config.patch.yml
        - command:
            - /bin/bash
            - '-c'
            - >
              scriptsPath="/opt/jfrog/artifactory/app/bin"; mkdir -p
              $scriptsPath; echo "Copy migration scripts and Run migration"; cp
              -fv /tmp/migrate.sh $scriptsPath/migrate.sh; cp -fv
              /tmp/migrationHelmInfo.yaml $scriptsPath/migrationHelmInfo.yaml;
              cp -fv /tmp/migrationStatus.sh $scriptsPath/migrationStatus.sh;
              mkdir -p /var/opt/jfrog/artifactory/log; bash
              $scriptsPath/migrationStatus.sh 7.49.6 3600 > >(tee
              /var/opt/jfrog/artifactory/log/helm-migration.log) 2>&1;
          env: null
          image: 'releases-docker.jfrog.io/jfrog/artifactory-jcr:7.49.6'
          imagePullPolicy: IfNotPresent
          name: migration-artifactory
          resources: {}
            # limits:
            #   cpu: '1'
            #   memory: 4Gi
            # requests:
            #   cpu: '500m'
            #   memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
            runAsNonRoot: true
          volumeMounts:
            - mountPath: /tmp/migrate.sh
              name: migration-scripts
              subPath: migrate.sh
            - mountPath: /tmp/migrationHelmInfo.yaml
              name: migration-scripts
              subPath: migrationHelmInfo.yaml
            - mountPath: /tmp/migrationStatus.sh
              name: migration-scripts
              subPath: migrationStatus.sh
            - mountPath: /var/opt/jfrog/artifactory
              name: artifactory-volume
            - mountPath: /tmp/etc/artifactory/binarystore.xml
              name: binarystore-xml
              subPath: binarystore.xml
      securityContext:
        fsGroup: 1030
        runAsUser: 1030
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: jfrog-artifactory-migration-scripts
          name: migration-scripts
        - configMap:
            name: jfrog-artifactory-installer-info
          name: installer-info
        - name: systemyaml
          secret:
            secretName: jfrog-artifactory-systemyaml
        - name: access-config
          secret:
            secretName: jfrog-artifactory-access-config
        - name: binarystore-xml
          secret:
            secretName: jfrog-artifactory-binarystore
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: artifactory-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
---


# # apiVersion: v1 
## kind: Secret
# # metadata:
# #   name: keycloak-externaldb
# #   namespace: user-management
# # immutable: true
# # data: 
# #    password: aHVpZmRvaXR5bG9ha3BkaGdkZmRhc3MyMzQK
  
# apiVersion: networking.istio.io/v1alpha3
# kind: VirtualService
# metadata:
#   labels:
#   name: keycloak
#   namespace: user-management
# spec:
#   gateways:
#   - istio-system/general-gateway
#   hosts:
#   - 'keycloak.fredgentech.net'
#   http:
#   - retries:
#       attempts: 3
#       perTryTimeout: 2s
#     match:
#     - uri:
#         prefix: /
#     route:
#     - destination:
#         host: keycloak
#         port:
#           number: 80


#   # admin-password: YWRtaW4=
#   # database: a2V5Y2xvYWs=
#   # db-password: YUhWcFptUnZhWFI1Ykc5aGEzQmthR2RrWm1SaGMzTXlNelFL
#   # host: a2V5Y2xvYWsuY3hoZmFxc2V5MHVnLnVzLXdlc3QtMi5yZHMuYW1hem9uYXdzLmNvbQ==
#   # port: NTQzMg==
#   # user: cG9zdGdyZXM=